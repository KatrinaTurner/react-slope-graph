{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@grafana/data\"","webpack:///external \"react\"","webpack:///./module.ts","webpack:///./SimplePanel.tsx","webpack:///./parser.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","data","parsedData","num_pairs","console","log","extractedData","series","fields","transformedData","values","buffer","temp","push","sorted_org_pairs","sort","a","b","top_10_pairs","slice","Math","min","length","source_orgs","source_encoding","counter","new_org","added","j","coords","parseInt","y","dest_orgs","dest_encoding","color_palette","max_value","color_scale","ceil","color","source","dest","srcOrgs","destOrgs","topPairs","ParseData","setPanelOptions","builder","addTextInput","path","description","defaultValue","addBooleanSwitch","addRadio","settings","options","label","showIf","config","addNumberInput"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { PanelPlugin } from '@grafana/data';\r\nimport { SimpleOptions } from './types';\r\nimport { SimplePanel } from './SimplePanel';\r\n\r\nexport const plugin = new PanelPlugin<SimpleOptions>(SimplePanel).setPanelOptions(builder => {\r\n  return builder\r\n    .addTextInput({\r\n      path: 'text',\r\n      name: 'Simple text option',\r\n      description: 'Description of panel option',\r\n      defaultValue: 'Default value of text input option',\r\n    })\r\n    .addBooleanSwitch({\r\n      path: 'showSeriesCount',\r\n      name: 'Show series counter',\r\n      defaultValue: false,\r\n    })\r\n    .addRadio({\r\n      path: 'seriesCountSize',\r\n      defaultValue: 'sm',\r\n      name: 'Series counter size',\r\n      settings: {\r\n        options: [\r\n          {\r\n            value: 'sm',\r\n            label: 'Small',\r\n          },\r\n          {\r\n            value: 'md',\r\n            label: 'Medium',\r\n          },\r\n          {\r\n            value: 'lg',\r\n            label: 'Large',\r\n          },\r\n        ],\r\n      },\r\n      showIf: config => config.showSeriesCount,\r\n    })\r\n    .addNumberInput({\r\n      path: 'numLines',\r\n      name: 'Number of Lines to Display',\r\n      defaultValue: 10,\r\n    })\r\n    .addTextInput({\r\n      path: 'leftHeader',\r\n      name: 'Left Column Header',\r\n      defaultValue: 'Left Title',\r\n    })\r\n    .addTextInput({\r\n      path: 'rightHeader',\r\n      name: 'Right Column Header',\r\n      defaultValue: 'Right Title',\r\n    });\r\n});\r\n","import React from 'react';\r\nimport { PanelProps } from '@grafana/data';\r\nimport { SimpleOptions } from 'types';\r\nimport { ParseData } from 'parser.js';\r\n\r\ninterface Props extends PanelProps<SimpleOptions> {}\r\n\r\nexport const SimplePanel: React.FC<Props> = ({ options, data, width, height }) => {\r\n  const parsedData = ParseData(data);\r\n\r\n  console.log(parsedData);\r\n\r\n  return (\r\n    <div>React Panel</div>\r\n  );\r\n};\r\n\r\n/*\r\nvar d3 = require('d3')\r\n\r\nclass SvgHandler {\r\n    constructor(id) {\r\n        this.containerID = id;\r\n    }\r\n\r\n    renderGraph(parsedData, ctrl, header1, header2) {\r\n\r\n        if (!parsedData) {\r\n            return;\r\n        }\r\n\r\n        let top_10_pairs = parsedData.topPairs;\r\n        let source_orgs = parsedData.srcOrgs;\r\n        let dest_orgs = parsedData.destOrgs;\r\n        let alpha = parsedData.alpha;\r\n        let color_palette = parsedData.color_palette;\r\n\r\n        let min_value = top_10_pairs[top_10_pairs.length - 1][2]\r\n        let max_value = top_10_pairs[0][2]\r\n\r\n        console.log(\"rendering Graph...\");\r\n\r\n        let panelWidth = document.getElementById(this.containerID).offsetWidth;\r\n        let panelHeight = document.getElementById(this.containerID).offsetHeight;\r\n\r\n        console.log(this.containerID, top_10_pairs);\r\n        // set the dimensions and margins of the graph\r\n        var margin = { top: 50, right: 400, bottom: 25, left: 400 },\r\n            width = panelWidth - margin.left - margin.right,\r\n            height = ctrl.height - margin.top - margin.bottom;\r\n\r\n\r\n\r\n        // append the svg object to the body of the page\r\n        var svg = d3.select(\"#\" + this.containerID)\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\r\n        // function to wrap text!\r\n        function wrap(text, width) {\r\n            text.each(function () {\r\n                var text = d3.select(this),\r\n                    words = text.text().split(/\\s+/).reverse(),\r\n                    word,\r\n                    line = [],\r\n                    lineNumber = 0,\r\n                    lineHeight = 1.1, // ems\r\n                    y = text.attr(\"y\"),\r\n                    dy = parseFloat(text.attr(\"dy\")),\r\n                    tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\r\n                while (word = words.pop()) {\r\n                    line.push(word);\r\n                    tspan.text(line.join(\" \"));\r\n                    if (tspan.node().getComputedTextLength() > width) {\r\n                        line.pop();\r\n                        tspan.text(line.join(\" \"));\r\n                        line = [word];\r\n                        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Add X scale\r\n        var x = d3.scaleLinear()\r\n            .domain([0, 1])\r\n            .range([0, width])\r\n\r\n\r\n        // y scales\r\n        var yl = d3.scaleLinear()\r\n            .domain([0, source_orgs.length - 1])\r\n            .range([0, height])\r\n\r\n        var yr = d3.scaleLinear()\r\n            .domain([0, dest_orgs.length - 1])\r\n            .range([0, height])\r\n\r\n\r\n        // Add Y axes\r\n        var leftAxis = d3.axisLeft(yl)\r\n            .tickSize(5)\r\n            .ticks(source_orgs.length)\r\n            .tickFormat((d) => {\r\n                return source_orgs[d]\r\n            })\r\n\r\n        var rightAxis = d3.axisRight(yr)\r\n            .tickSize(5)\r\n            .ticks(dest_orgs.length)\r\n            .tickFormat((d) => {\r\n                return dest_orgs[d]\r\n            })\r\n\r\n        svg.append(\"g\").call(leftAxis)\r\n            .attr(\"class\", \"axis\")\r\n            .attr(\"margin\", 10)\r\n            .selectAll(\".tick text\")\r\n            .call(wrap, margin.left - 50)\r\n            .attr(\"transform\", \"translate(\" + -10 + \",0)\")\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + width + \",0)\")\r\n            .call(rightAxis)\r\n            .attr(\"class\", \"axis\")\r\n            .selectAll(\".tick text\")\r\n            .call(wrap, margin.right - 50)\r\n            .attr(\"transform\", \"translate(\" + 10 + \",0)\")\r\n\r\n\r\n\r\n        // scale for width of lines\r\n        var w = d3.scaleLinear()\r\n            .domain([top_10_pairs[top_10_pairs.length - 1][2], top_10_pairs[0][2]])\r\n            .range([3, 15])\r\n\r\n        var div = d3.select(\"body\").append(\"div\")\r\n            .attr(\"class\", \"tooltip\")\r\n            .style(\"opacity\", 0);\r\n\r\n\r\n        // Add the lines\r\n        for (i in top_10_pairs) {\r\n            var value = top_10_pairs[i][2];\r\n\r\n            svg.append(\"path\")\r\n                .datum(top_10_pairs[i].coords)\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke\", function (d) { return d[0].color })\r\n                //() => {\r\n                //     var alpha = 0.7; // w(top_10_pairs[i][2]) / 5;\r\n                //     var color = \"rgba(51, 102, 255,\" + alpha + \")\";\r\n                //     return color;\r\n                // })\r\n                .attr(\"stroke-width\", 8) // w(top_10_pairs[i][2]))\r\n                .attr(\"d\", d3.line()\r\n                    .x(function (d) { return x(d.x) })\r\n                    .y(function (d) {\r\n                        if (d.x == 0) {\r\n                            return yl(d.y)\r\n                        } else {\r\n                            return yr(d.y)\r\n                        }\r\n                    }))\r\n                .on(\"mouseover\", function (d) {\r\n                    d3.select(this).attr(\"stroke\", \"orange\")\r\n                        .attr(\"class\", \"path-hover\");\r\n                    div.transition()\r\n                        .duration(200)\r\n                        .style(\"opacity\", .9);\r\n                    div.html(() => {                    // takes in value in BYTES and converts to appropriate MB,GB, etc\r\n                        var value = d[0].value\r\n                        value = value / 1000;\r\n                        var volume = value;\r\n                        if (value < 1000) {\r\n                            volume = (Math.round(value * 10) / 10) + \" KB\";\r\n                        } else {\r\n                            value = value / 1000;\r\n                            if (value < 1000) {\r\n                                volume = (Math.round(value * 10) / 10) + \" MB\"\r\n                            } else {\r\n                                value = value / 1000;\r\n                                if (value < 1000) {\r\n                                    volume = (Math.round(value * 10) / 10) + \" GB\"\r\n                                } else {\r\n                                    value = value / 1000;\r\n                                    if (value < 1000) {\r\n                                        volume = (Math.round(value * 10) / 10) + \" TB\"\r\n                                    } else {\r\n                                        volume = (Math.round(value * 10) / 10) + \" PB\"\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var text = \"<p><b>Source:</b> \" + d[0].source + \"</p><p><b>Destination:</b> \" + d[0].dest + \"</p><p><b>Volume:</b> \" + volume;\r\n                        return text;\r\n                    })\r\n                        .style(\"left\", (d3.event.pageX) + \"px\")\r\n                        .style(\"top\", (d3.event.pageY - 28) + \"px\")\r\n                })\r\n                .on(\"mouseout\", function (d) {\r\n                    div.transition()\r\n                        .duration(500)\r\n                        .style(\"opacity\", 0);\r\n                    d3.select(this).attr(\"stroke\", () => {\r\n                        return d[0].color;\r\n                    })\r\n                })\r\n        }\r\n\r\n        // Add axis labels\r\n        svg.append(\"text\")\r\n            .attr(\"class\", \"header-text\")\r\n            .attr(\"transform\", \"translate(\" + -(margin.left / 2) + \",\" + -(margin.top / 2) + \")\")  // above left axis\r\n            .attr(\"text-anchor\", \"center\")\r\n            .text(header1);\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"class\", \"header-text\")\r\n            .attr(\"transform\", \"translate(\" + (width + margin.right / 5) + \",\" + -(margin.top / 2) + \")\")  // above right axis\r\n            .attr(\"text-anchor\", \"center\")\r\n            .text(header2);\r\n\r\n        // add legend\r\n\r\n        // var colorScale = d3.scaleQuantize()\r\n        //     .domain([min_value,max_value])\r\n        //     .range(color_palette);\r\n\r\n        // var colorLegend = d3.legendColor()\r\n        //     .labelFormat(d3.format(\".0f\"))\r\n        //     .scale(colorScale)\r\n        //     .shapePadding(3)\r\n        //     .shapeWidth(50)\r\n        //     .shapeHeight(20)\r\n        //     .labelOffset(12);\r\n\r\n        // svg.append(\"g\")\r\n        //     .attr(\"transform\", \"translate(\" + (width + margin.right / 2) + \", 60)\")\r\n        //     .call(colorLegend);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = SvgHandler;\r\n*/\r\n","\r\nexport function ParseData(data, num_pairs) {\r\n  console.log(\"react num pairs:\" + num_pairs)\r\n  console.log(\"react data:\");\r\n  console.log(data);\r\n\r\n  // series[0].fields[x].values.buffer gives data now.\r\n  // x = 0: source, 1: dest, 2: value\r\n  var extractedData = data.series[0].fields;\r\n  var transformedData = [];\r\n\r\n  for (i in extractedData[0].values.buffer) {\r\n    var temp = [extractedData[0].values.buffer[i], extractedData[1].values.buffer[i], extractedData[2].values.buffer[i]]\r\n    transformedData.push(temp);\r\n  }\r\n  console.log(\"transformed data\");\r\n  console.log(transformedData);\r\n\r\n  let sorted_org_pairs = transformedData.sort((a, b) => b[2] - a[2]);\r\n\r\n  // top 10 is actually top N, set by editor.  Default is 10.\r\n  let top_10_pairs = sorted_org_pairs.slice(0, Math.min(num_pairs, sorted_org_pairs.length));\r\n\r\n\r\n  // MAKE KEYS\r\n  let source_orgs = [];\r\n  let source_encoding = [];\r\n  let counter = 0;\r\n  for (i in top_10_pairs) {\r\n    let new_org = top_10_pairs[i][0];\r\n    let added = false;\r\n    top_10_pairs[i].coords = [\r\n      { \"x\": 0, \"value\": top_10_pairs[i][2] },\r\n      { \"x\": 1 }]\r\n    for (j in source_orgs) {\r\n      if (source_orgs[j] == new_org) {\r\n        added = true;\r\n        source_encoding.push(parseInt(j));\r\n        top_10_pairs[i].coords[0].y = parseInt(j);\r\n        break;\r\n      }\r\n    }\r\n    if (!added) {\r\n      source_orgs.push(new_org);\r\n      source_encoding.push(counter);\r\n      top_10_pairs[i].coords[0].y = counter;\r\n      counter++;\r\n    }\r\n  }\r\n\r\n  // dest keys\r\n\r\n  let dest_orgs = [];\r\n  let dest_encoding = [];\r\n  counter = 0;\r\n  for (i in top_10_pairs) {\r\n    let new_org = top_10_pairs[i][1];\r\n    let added = false;\r\n    for (j in dest_orgs) {\r\n      if (dest_orgs[j] == new_org) {\r\n        added = true;\r\n        dest_encoding.push(parseInt(j));\r\n        top_10_pairs[i].coords[1].y = parseInt(j);\r\n        break;\r\n      }\r\n    }\r\n    if (!added) {\r\n      dest_orgs.push(new_org);\r\n      dest_encoding.push(counter);\r\n      top_10_pairs[i].coords[1].y = counter;\r\n      counter++;\r\n    }\r\n  }\r\n\r\n\r\n  // tick marks at source_orgs & dest_orgs,\r\n  // line y values at source_encoding & dest_encoding\r\n  // line thickness relative to top_values\r\n\r\n\r\n  // set colors by value as well.\r\n  let alpha = 0.6\r\n  let color_palette = [\r\n    \"rgba(196, 199, 254, \" + alpha + \")\",\r\n    \"rgba(171, 176, 253, \" + alpha + \")\",\r\n    \"rgba(146, 152, 248, \" + alpha + \")\",\r\n    \"rgba(122, 130, 246, \" + alpha + \")\",\r\n    \"rgba(106, 115, 245, \" + alpha + \")\",\r\n    \"rgba(85, 95, 244, \" + alpha + \")\",\r\n    \"rgba(56, 67, 241, \" + alpha + \")\",\r\n    \"rgba(23, 36, 238, \" + alpha + \")\",\r\n    \"rgba(2, 14, 202, \" + alpha + \")\",\r\n    \"rgba(3, 12, 158, \" + alpha + \")\"]\r\n\r\n  let max_value = top_10_pairs[0][2];\r\n\r\n  console.log(\"max val: \" + max_value);\r\n\r\n  for (i in top_10_pairs) {\r\n    let color_scale = Math.ceil(top_10_pairs[i][2] / max_value * 10)\r\n    if (color_scale > 0) {\r\n      color_scale--;\r\n    }\r\n    top_10_pairs[i].coords[0].color = color_palette[color_scale];\r\n\r\n    // add source/dest to coords\r\n    top_10_pairs[i].coords[0].source = top_10_pairs[i][0];\r\n    top_10_pairs[i].coords[0].dest = top_10_pairs[i][1];\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  console.log(top_10_pairs)\r\n\r\n  let objToReturn = {\r\n    srcOrgs: source_orgs,\r\n    destOrgs: dest_orgs,\r\n    topPairs: top_10_pairs\r\n  }\r\n\r\n  return objToReturn;\r\n}\r\n\r\n"],"sourceRoot":""}